// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  username String @unique
  password String
  firstName String
  lastName String
  email String
  profileImage String @default("defaultuser.png")
  dob DateTime
  gender Gender
  bio String?
  registeredOn DateTime @default(now())
  role RoleType @default(USER)
  flagcount Int? @default(0)
  //edi mail ko implementation vaye paxi eslai inactive ra euta table maa token pathaera verify garepaxi
  status UserStatus @default(ACTIVE)
  badges Json? @default("[]") // Array of IDs from badge table
  posts Post[]
  likes LikeTable[]
  comments Comment[]
  followers Followers[] @relation("FollowingToUser")
  following Followers[] @relation("FollowersToUser")
}

model Category {
  id String @id @default(uuid())
  category String
  description String @default("")
  parentId Int @default(0)
  posts Post[]
}

model Post {
  id String @id @default(uuid())
  author User @relation(fields: [authorId], references: [id])
  authorId String
  category Category @relation(fields: [categoryId],references: [id])
  categoryId String
  title String
  excerpt String?
  content String
  timestamp DateTime @default(now())
  lastEdited DateTime @updatedAt
  image String? @default("postDefault.png")
  status PostStatus @default(DRAFT)
  likes LikeTable[]
  comments Comment[]
  flags Flag[]
}

model LikeTable{
  id String @id @default(uuid())
  post Post @relation(fields: [postId], references: [id])
  postId String
  user User @relation(fields: [userId], references: [id])
  userId String
  timestamp DateTime @default(now())
}

model Comment {
  id String @id @default(uuid())
  post Post @relation(fields: [postId], references: [id])
  postId String
  user User @relation(fields: [userId] , references: [id])
  userId String
  timeStamp DateTime @default(now())
  lastEdited DateTime @updatedAt
}

model Flag {
  id String @id @default(uuid())
  post Post @relation(fields: [postId], references: [id])
  postId String
  timestamp DateTime @default(now())
  flagType FlagType
  description String? @db.VarChar(64)
  flagStatus FlagStatus
}


model Followers {
  id String @id @default(uuid())
  followedByUser User @relation(name: "FollowersToUser", fields: [followedByUserID] , references: [id])
  followingUser User @relation(name: "FollowingToUser", fields: [followingUserID] , references: [id])
  followedByUserID String
  followingUserID String
}

enum RoleType {
   ADMIN
   USER 
   MODERATOR
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum UserStatus {
  BANNED
  INACTIVE
  ACTIVE
}

enum PostStatus {
  BLOCKED
  DRAFT
  PUBLISHED
  ARCHIVED
  PUBLICARCHIVE
}


enum FlagType {
  Spam
  Bullying
  Inappropriate
  Illegal
  PromotingViolence
  TOSVoilation
}

enum FlagStatus {
  FLAGGED
  REJECTED
  PENDING
}